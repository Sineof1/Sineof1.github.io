<!DOCTYPE html>
<html lang='en'>
<head>
<title>Division</title>
<link rel='icon' href='https://lh4.googleusercontent.com/-KV4kSClOebQ/VSXiO563a4I/AAAAAAAAR_k/iAHD6fF42F0/s144-no/nbk_favicon.gif'>
</head>
<style type="text/css">

body {
   width:800px;
   margin-left:auto;
   margin-right:auto;
   margin-top:50px;
}

#canvas {
   width:800px;
   height:650px;
   border:2px solid #888888;
   border-radius:5px;
}

#canvas:hover {
   cursor:pointer;
}

img {
   visibility:hidden;
}

#inputArea {
   width:800px;
   height:150px;
   margin-left:auto;
   margin-right:auto;
   margin-top:-12px;
   border-right:2px solid #888888;
   border-bottom:2px solid #888888;
   border-left:2px solid #888888;
   background-color:rgb(244, 180, 0);
   border-radius:15px;
}

#inputStuff {
   position:absolute;
   width:600px;
   height:50px;
   margin-left:230px;
   margin-top:45px;
}

#dividend, #divisor {
   width:50px;
   height:50px;
   margin-left:50px;
   margin-right:50px;
   font-family:'Times' sans;
   font-size:40px;
   font-weight:600;
   color:white;
   text-align:center;
   border-radius:5px;
   background-color:rgba(244, 180, 0, 0.5);
   vertical-align:middle;
}

#static {
   font-size:60px;
   vertical-align:middle;
   color:white;
   font-weight:800;
   font-family:'Times' sans;
}

</style>

<body>

<canvas id='canvas' width='800px' height='650px'>Canvas is not supported.</canvas>
<div id='inputArea'><div id='inputStuff'><input id='dividend' type='text' autofocus name='dividend' onkeyup = 'drawDividend()' maxlength='2'> <span id='static'>&divide</span> <input id='divisor' type='text' name='divisor' onkeyup = 'drawDivisor()' maxlength='1'></div></div>
<center><img src='https://lh4.googleusercontent.com/-A6-PKf_AXqY/VSXn5VAwgwI/AAAAAAAASBM/s4QTDT0hnHc/w768-h762-no/division.PNG'></center></body>
<script>
var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');


var grid = [];
var counters = [];
for (var a = 0; a <= 9; a++) {
    for (var b = 0; b <= 9; b++) {
        grid.push({x: b * 60 + 100, y: a * 60, cellFilled: false,
                   color:'#ffffff'});
}}
var grad = context.createLinearGradient(canvas.width / 2, 0, canvas.width / 2, canvas.height);
grad.addColorStop(0.1, '#e0e0e0');
grad.addColorStop(1, '#ffffff');
context.fillStyle = grad;
context.fillRect(0, 0, canvas.width, canvas.height);

var colors = ['#ff0000', '#ffa500', '#ffff00', '#b33ecd', '#b0582e', '#00ff00', '#4ab1eb', '#ffc0cb', '#cccccc', '#000000'];
var mouseIsDown = false;
var tones = ['audio1', 'audio2', 'audio3', 'audio4'];

function windowToCanvas_touch(elem, x, y) {
    var box = elem.getBoundingClientRect();
    var body = document.body;
    var docElem = document.documentElement;
    var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
    var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;
    var clientTop = docElem.clientTop || body.clientTop || 0;
    var clientLeft = docElem.clientLeft || body.clientLeft || 0;
    var top  = box.top +  scrollTop - clientTop;
    var left = box.left + scrollLeft - clientLeft;
    return { y: (y - top) * (canvas.height / box.height), x: (x - left) * (canvas.width / box.width) };
};

function windowToCanvas_mouse(canvas, x, y) {
    var bbox = canvas.getBoundingClientRect();
    return {x: (x - bbox.left) * (canvas.width / bbox.width), y: (y - bbox.top) * (canvas.height / bbox.height)};
};

function reset() {
    context.clearRect(0, 0, canvas.width, canvas.height);
    document.getElementById('dividend').value = '';
    document.getElementById('divisor').value = '';
    grid = [];
    for (var a = 0; a <= 9; a++) {
        for (var b = 0; b <= 9; b++) {
            grid.push({x: b * 60 + 100, y: a * 60,
                       cellFilled: false, color:'#ffffff'});
    }}
    var grad = context.createLinearGradient(canvas.width / 2, 0, canvas.width / 2, canvas.height);
    grad.addColorStop(0.1, '#e0e0e0');
    grad.addColorStop(1, '#ffffff');
    context.fillStyle = grad;
    context.fillRect(0, 0, canvas.width, canvas.height);
    document.getElementById('dividend').focus();
};

function drawCounter(x, y, col, q) {
    if (!q) {};
    context.beginPath();
    context.lineWidth = 3;
    context.strokeStyle = 'blue';
    context.fillStyle = col;
    context.shadowColor = 'rgba(0, 0, 0, 0.5)';
    context.shadowOffsetY = 4;
    context.shadowBlur = 7;
    grid[q].color = col;
    context.arc(x, y, 25, 0, Math.PI * 2);
    context.stroke();
    context.fill();
};

function mouseClick(evt) {
    evt.preventDefault();
    var loc = windowToCanvas_mouse(canvas, evt.clientX, evt.clientY);
    if (loc.x < 0 || loc.x > 800) {
        var choice = [];
        for (var a = 0; a < 100; a++) if (grid[a].cellFilled === false) choice.push(a);
        if (choice.length > 1) {
            var rand = choice[Math.floor(Math.random() * choice.length)];
            drawCounter(grid[rand].x + 30, grid[rand].y + 30, '#ffffff', rand);
            grid[rand].cellFilled = true;
            document.getElementById('dividend').value = 100 - choice.length + 1;
        }
        drawDivisor();
    }
};

function drawDividend() {
    context.clearRect(100, 0, 625, 625);
    context.fillStyle = grad;
    context.fillRect(0, 0, canvas.width, canvas.height);
    for (var a = 0; a < 100; a++) grid[a].cellFilled = false;

    var val = parseInt(document.getElementById('dividend').value);
    var divisor = parseInt(document.getElementById('divisor').value);
    if (val < divisor) {
        document.getElementById('divisor').value = '';
        drawDivisor();
    }
    if (!val) return;
    var count = 0;
    while (count < val) {
        var choice = [];
        for (var a = 0; a < 100; a++) {
            if (grid[a].cellFilled === false) choice.push(a);
        }
        var rand = choice[Math.floor(Math.random() * choice.length)];
        drawCounter(grid[rand].x + 30, grid[rand].y + 30, '#ffffff', rand);
        grid[rand].cellFilled = true;
        count++;
    }
    if (String(val).length === 2) document.getElementById('divisor').focus();
    if (document.getElementById('divisor').value) drawDivisor();
};

function drawDivisor() {
    counters = [];
    var dividend = parseInt(document.getElementById('dividend').value);
    var divisor = parseInt(document.getElementById('divisor').value);
    
    if (divisor === 0) reset();

    if (dividend < divisor) {
        document.getElementById('divisor').value = '';
        return;
    }
    if (!divisor || !dividend) return;

    context.clearRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = grad;
    context.fillRect(0, 0, canvas.width, canvas.height);
    var choices = [];
    for (var u = 0; u < colors.length; u++) {
        choices.push(colors[u]);
    }
    var filled = [];
    for (var s = 0; s < 100; s++) {
        if (grid[s].cellFilled === true) filled.push(s);
    }
    for (var c = 0; c < divisor; c++) {
        var rand_col = choices[Math.floor(Math.random() * choices.length)];
        choices.splice(choices.indexOf(rand_col), 1);
        var count = 0;
        while (count < Math.floor(dividend / divisor)) {
            drawCounter(grid[filled[0]].x + 30, grid[filled[0]].y + 30, rand_col, filled[0]);
            counters.push({x: grid[filled[0]].x + 30, y: grid[filled[0]].y + 30, color: rand_col});
            filled.splice(0, 1);
            count++;
    }}
    for (var q = 0; q < filled.length; q++) {
        drawCounter(grid[filled[q]].x + 30, grid[filled[q]].y + 30, '#ffffff', filled[q]);
        counters.push({x: grid[filled[q]].x + 30, y: grid[filled[q]].y + 30, color: '#ffffff'});
    }
};

function newDraw() {
    context.clearRect(0, 0, canvas.width, canvas.height);
    var grad = context.createLinearGradient(canvas.width / 2, 0, canvas.width / 2, canvas.height);
    grad.addColorStop(0.1, '#e0e0e0');
    grad.addColorStop(1, '#ffffff');
    context.fillStyle = grad;
    context.fillRect(0, 0, canvas.width, canvas.height);
};

function moveAround() {
    if (document.getElementById('divisor').value === '') return;
    mouseIsDown = true;
    var loc = windowToCanvas_mouse(canvas, event.clientX, event.clientY);
    for (var a = 0; a < counters.length; a++) {
        if (loc.x < counters[a].x + 30 && loc.x > counters[a].x - 30 && loc.y < counters[a].y + 30 && loc.y > counters[a].y - 30) {
            counters[a].grabbed = true;
    }}
};

function moveAroundTouch() {
   event.preventDefault();
   if (document.getElementById('divisor').value === '') return;
   mouseIsDown = true;
   var t = windowToCanvas_touch(canvas, event.changedTouches[0].pageX, event.changedTouches[0].pageY);
   for (var a = 0; a < counters.length; a++) {
        if (t.x < counters[a].x + 30 && t.x > counters[a].x - 30 && t.y < counters[a].y + 30 && t.y > counters[a].y - 30) {
            counters[a].grabbed = true;
   }}
};

function moveCounters() {
    if (mouseIsDown === false) return;
    newDraw();
    var loc = windowToCanvas_mouse(canvas, event.clientX, event.clientY);
    for (var a = 0; a < counters.length; a++) {
        drawCounter(counters[a].x, counters[a].y, counters[a].color, a);
        if (counters[a].grabbed === true) {
            counters[a].x = loc.x;
            counters[a].y = loc.y;
    }}
};

function moveCountersTouch() {
    event.preventDefault;
    if (mouseIsDown === false) return;
    newDraw();
    var t = windowToCanvas_touch(canvas, event.changedTouches[0].pageX, event.changedTouches[0].pageY);
    for (var a = 0; a < counters.length; a++) {
        drawCounter(counters[a].x, counters[a].y, counters[a].color, a);
        if (counters[a].grabbed === true) {
            counters[a].x = t.x;
            counters[a].y = t.y;
    }}
};

function stopCounters() {
    mouseIsDown = false;
    for (var a = 0; a < counters.length; a++) {
        if (counters[a].grabbed) counters[a].grabbed = false;
    }
};

function stopCountersTouch() {
    mouseIsDown = false;
    for (var a = 0; a < counters.length; a++) {
        if (counters[a].grabbed) counters[a].grabbed = false;
    }
};

window.addEventListener('click', mouseClick, false);
canvas.addEventListener('mousedown', moveAround, false);
canvas.addEventListener('touchstart', moveAroundTouch, false);
canvas.addEventListener('mousemove', moveCounters, false);
canvas.addEventListener('touchmove', moveCountersTouch, false);
canvas.addEventListener('mouseup', stopCounters, false);
canvas.addEventListener('touchend', stopCountersTouch, false);
</script>
</html>
