{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","state","generateQR","bind","fixEncode","document","getElementById","style","border","hint1txt","value","hint2txt","hint3txt","this","req","unirest","url","encodeURI","query","headers","end","res","error","Error","img","body","imgsrc","btoa","unescape","encodeURIComponent","qcodeimg","src","visibility","hint","result","replace","className","id","type","maxLength","onClick","width","height","marginTop","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b3e91bdf.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport unirest from 'unirest';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {};\n    this.generateQR = this.generateQR.bind(this);\n    this.fixEncode = this.fixEncode.bind(this);\n  }\n  generateQR() {\n    document.getElementById('hint1').style.border = '1px solid lightgray';\n    document.getElementById('hint2').style.border = '1px solid lightgray';\n    document.getElementById('hint3').style.border = '1px solid lightgray';\n    var hint1txt = document.getElementById('hint1').value;\n    var hint2txt = document.getElementById('hint2').value;\n    var hint3txt = document.getElementById('hint3').value;\n    hint1txt = this.fixEncode(hint1txt);\n    hint2txt = this.fixEncode(hint2txt);\n    hint3txt = this.fixEncode(hint3txt);\n    if (hint1txt === '') {\n       document.getElementById('hint1').style.border = '2px solid red';\n       return;\n    }\n    else document.getElementById('hint1').style.border = '1px solid lightgray';\n    if (hint2txt === '') {\n       document.getElementById('hint2').style.border = '2px solid red';\n       return;\n    }\n    else document.getElementById('hint2').style.border = '1px solid lightgray';\n    if (hint3txt === '') {\n       document.getElementById('hint3').style.border = '2px solid red';\n       return;\n    }\n    else document.getElementById('hint3').style.border = '1px solid lightgray';\n\n    var req = unirest(\"GET\", \"https://qrcode-monkey.p.rapidapi.com/qr/custom\");\n    var url = encodeURI(`https://sineof1.github.io/livehint_qr.html?customhint1=${hint1txt}&customhint2=${hint2txt}&customhint3=${hint3txt}`);\n\n    req.query({\"size\":\"150\",\"file\":\"svg\",\"config\":\"%7B%22bodyColor%22%3A%22%230277BD%22%2C%22body%22%3A%22dot%22%2C%22eye%22%3A%22frame1%22%2C%22eyeball%22%3A%22ball5%22%2C%22logo%22%3A%22https%3A%2F%2Fguzintamath.com%2Fimages%2Ftblogo.png%22%2C%22logoMode%22%3A%22clean%22%7D\",\"data\":url});\n\n    req.headers({'x-rapidapi-host' : 'qrcode-monkey.p.rapidapi.com',\n                 'x-rapidapi-key' : '3aadbb4a32msha9dab35b444963ap106f55jsnb0035b424666', 'useQueryString' : true});\n\n    req.end(function(res) {\n      if (res.error) throw new Error(res.error);\n      var img = res.body;\n      var imgsrc = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(img)));\n      var qcodeimg = document.getElementById('qrcodeimg');\n      qcodeimg.src = imgsrc;\n      qcodeimg.style.visibility = 'visible';\n    });\n  }\n  fixEncode(hint) {\n     var result = hint.replace(/%/g, '%25');\n     result = result.replace(/\\$/g, '%24');\n     result = hint.replace(/=/g, '%3D');\n     result = result.replace(/\\+/g, '%2B');\n     result = result.replace(/×/g, '%C3%97');\n     result = result.replace(/÷/g, '%C3%B7');\n     result = result.replace(/–/g, '%E2%80%93');\n     result = result.replace(/\\(/g, '%28');\n     result = result.replace(/\\)/g, '%29');\n     return result;\n  }\n  render() {\n    return (\n    <>\n    <div className='container'>\n    <div className='hint'><textarea className='hintinput' id='hint1' type='text' maxLength='300' /></div>\n    <div className='hint'><textarea className='hintinput' id='hint2' type='text' maxLength='300' /></div>\n    <div className='hint'><textarea className='hintinput' id='hint3' type='text' maxLength='300' /></div>\n    <button className='generate' id='generBut' onClick={this.generateQR}>generate</button>\n    </div>\n    <div className='qmark tooltip' id='ttip'>? <span className=\"tooltiptext\">Enter 3 hints. Generate the QR code. Download the image to use.</span></div>\n    <div className='qrcode' id='qrimg'><img id='qrcodeimg' width='200' height='200' style={{marginTop : 15, visibility : 'hidden'}} alt='' /></div>\n    </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}