{"version":3,"sources":["components/RuleTile.js","components/App.js","serviceWorker.js","index.js"],"names":["RuleTile","state","title","mainrule","media","this","setState","props","exampletxt","className","style","marginBottom","dangerouslySetInnerHTML","__html","uk-lightbox","href","src","marginTop","alt","Component","App","data","fetch","then","resp","json","records","ruletiles","a","length","mediachk","fields","push","Title","MainRuleTxt","ExampleTxt","Media","url","height","overflowY","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c54ae3ab.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../ruletile.css';\r\n\r\nclass RuleTile extends Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {title : null, mainrule : null, media : null};\r\n   }\r\n   componentDidMount() {\r\n      this.setState({title : this.props.title, mainrule : this.props.mainrule, media : this.props.media,\r\n                     exampletxt : this.props.exampletxt});\r\n   }\r\n   render() {\r\n      return (\r\n      <div>\r\n      <div className='uk-card uk-card-default uk-card-body uk-animation-slide-bottom' style={{marginBottom : 10}}>\r\n      <h3 className='uk-card-title'>{this.state.title}</h3>\r\n      <p className='mainRule' dangerouslySetInnerHTML={{__html : this.state.mainrule}} />\r\n      <p className='exampleTxt' dangerouslySetInnerHTML={{__html: this.state.exampletxt}} />\r\n      <div uk-lightbox=\"animation : slide\">\r\n      <a className='uk-inline' href={this.state.media}><img src={this.state.media} style={{marginTop : -15}} alt='' /></a>\r\n      </div>\r\n      </div>\r\n      </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default RuleTile;\r\n","import React, {Component} from 'react';\nimport RuleTile from './RuleTile';\n\nclass App extends Component {\n   constructor() {\n   super();\n   this.state = {data : null};\n   }\n   componentDidMount() {\n      fetch('https://api.airtable.com/v0/appoUqEuaflsHLVxn/StyleRules?api_key=keyuFtFTBZMHrzjOn')\n      .then((resp) => resp.json())\n      .then(data => {\n       this.setState({data : data.records});\n      });\n   }\n   render() {\n      if (!this.state.data) return null;\n      var ruletiles = [];\n      for (let a = 0; a < this.state.data.length; a++) {\n         let mediachk = false;\n         if ('Media' in this.state.data[a].fields) mediachk = true;\n         ruletiles.push(<RuleTile key={a} title={this.state.data[a].fields.Title}\n                                          mainrule={this.state.data[a].fields.MainRuleTxt}\n                                          exampletxt={this.state.data[a].fields.ExampleTxt}\n                                          media={mediachk === true ? this.state.data[a].fields.Media[0].url : null} />);\n      }\n      return (\n      <div>\n      <div style={{height : '85vh', overflowY : 'scroll'}}>\n      {ruletiles}\n      </div>\n      <div className='controlBox'>\n      </div>\n      </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}